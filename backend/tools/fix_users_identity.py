import os, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from sqlalchemy import text
from core.db import engine

sql = """
-- Try the modern IDENTITY first (Postgres 12+):
DO $$
BEGIN
  BEGIN
    EXECUTE 'ALTER TABLE users ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY';
  EXCEPTION WHEN others THEN
    -- If it already is identity or not supported, ignore and fall back to sequence method
    NULL;
  END;
END$$;

-- Ensure there's a sequence default if IDENTITY didn't take effect:
DO $$
BEGIN
  IF pg_get_serial_sequence('users','id') IS NULL THEN
    -- If no default present, create + attach a sequence
    IF (SELECT pg_get_expr(adbin, adrelid)
        FROM pg_attrdef d
        JOIN pg_class c ON c.oid=d.adrelid
        JOIN pg_attribute a ON a.attrelid=c.oid AND a.attnum=d.adnum
        WHERE c.relname='users' AND a.attname='id') IS NULL THEN
      CREATE SEQUENCE IF NOT EXISTS users_id_seq OWNED BY users.id;
      ALTER TABLE users ALTER COLUMN id SET DEFAULT nextval('users_id_seq');
    END IF;
  END IF;
END$$;

-- Make sure NOT NULL + PK exist:
ALTER TABLE users ALTER COLUMN id SET NOT NULL;
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint
    WHERE conrelid = 'users'::regclass AND contype = 'p'
  ) THEN
    ALTER TABLE users ADD CONSTRAINT users_pkey PRIMARY KEY (id);
  END IF;
END$$;
"""
with engine.begin() as conn:
    conn.execute(text(sql))
print("OK: users.id now auto-generates and PK is ensured.")
