# tools/fix_users_pk.py
import os, sys
from sqlalchemy import text
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from core.db import engine

CHECK_SQL = """
SELECT
  c.data_type,
  c.column_default,
  c.is_nullable,
  pg_get_serial_sequence('users','id') AS serial_seq,
  EXISTS (
    SELECT 1 FROM pg_constraint
    WHERE conrelid = 'users'::regclass AND contype = 'p'
  ) AS has_pk
FROM information_schema.columns c
WHERE c.table_name='users' AND c.column_name='id';
"""

FIX_SQL = """
-- Prefer IDENTITY on PG12+
DO $$
BEGIN
  BEGIN
    -- if there is any default, drop it before adding identity
    BEGIN
      EXECUTE 'ALTER TABLE users ALTER COLUMN id DROP DEFAULT';
    EXCEPTION WHEN others THEN
      NULL;
    END;
    EXECUTE 'ALTER TABLE users ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY';
  EXCEPTION WHEN others THEN
    -- Fall back to classic sequence path
    IF pg_get_serial_sequence('users','id') IS NULL THEN
      EXECUTE 'CREATE SEQUENCE IF NOT EXISTS users_id_seq OWNED BY users.id';
      EXECUTE 'ALTER TABLE users ALTER COLUMN id SET DEFAULT nextval(''users_id_seq'')';
    END IF;
  END;
END$$;

-- Ensure NOT NULL and PK
ALTER TABLE users ALTER COLUMN id SET NOT NULL;
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint
    WHERE conrelid = 'users'::regclass AND contype = 'p'
  ) THEN
    ALTER TABLE users ADD CONSTRAINT users_pkey PRIMARY KEY (id);
  END IF;
END$$;
"""

TEST_INSERT = """
INSERT INTO users (username,email,full_name,role,department,password_hash)
VALUES ('__probe__','probe@example.com','Probe User','teacher','test','x')
RETURNING id;
"""

CLEANUP = "DELETE FROM users WHERE username='__probe__';"

with engine.begin() as conn:
    print("Before fix:")
    print(conn.execute(text(CHECK_SQL)).mappings().first())

    conn.execute(text(FIX_SQL))

    print("\nAfter fix:")
    print(conn.execute(text(CHECK_SQL)).mappings().first())

    print("\nTesting INSERT without id...")
    new_id = conn.execute(text(TEST_INSERT)).scalar_one()
    print(f"OK, inserted with id={new_id}. Cleaning upâ€¦")
    conn.execute(text(CLEANUP))

print("\nAll good: users.id now auto-generates.")
